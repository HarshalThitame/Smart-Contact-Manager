package com.smart.controller;

import java.io.File;

import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.nio.file.StandardCopyOption;
import java.security.Principal;
import java.util.List;
import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.core.io.ClassPathResource;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.MultipartFile;

import com.smart.dao.ContactRepositiory;
import com.smart.dao.UserRepositiory;
import com.smart.entites.Contact;
import com.smart.entites.User;
import com.smart.helper.Message;

import jakarta.servlet.http.HttpSession;
import jakarta.validation.Valid;

@RequestMapping("/user")
@Controller
public class UserController {

	@Autowired
	private UserRepositiory userRepositiory;

	@Autowired
	private ContactRepositiory contactRepositiory;

	// method common data to handler
	@ModelAttribute
	public void addCommonData(Model model, Principal principal) {
		String userName = principal.getName();
		User user = this.userRepositiory.getUserByUserName(userName);
		model.addAttribute("user", user);

	}

	@RequestMapping("/index")
	public String dashboard(Model model, Principal principal, HttpSession session) {
		session.removeAttribute("message");
		model.addAttribute("title", "User Dashboard");
		return "normal/index";
	}

	// open add form handler
	@GetMapping("/add-contact")
	public String openAddContact(Model model, HttpSession session) {
		session.removeAttribute("message");
		model.addAttribute("title", "Add Contact");
		model.addAttribute("contact", new Contact());
		return "normal/add_contact_form";
	}

	/* proccessing contact form */
	@PostMapping("/process-contact")
	public String processContact(@Valid @ModelAttribute Contact contact,BindingResult bindingResult, @RequestParam("profileImage") MultipartFile file,
			Principal principal, HttpSession session,Model model) {
		session.removeAttribute("message");
		try {
			
			List<Contact> list = this.contactRepositiory.findAll();
			
			String str[] = new String[list.size()];
			String no[] = new String[list.size()];
			
			int i = 0;
			for(Contact l:list)
			{
				str[i] = l.getEmail();
				no[i] = 
				i++;
			}
			
			for(i =0 ; i < str.length;i++)
			{
				if(str[i].equals(contact.getEmail()))
				{
//					model.addAttribute("contact", );
					session.setAttribute("message", new Message("A contact with email "+contact.getEmail() +" already exists", "alert-danger"));
					return "/normal/add_contact_form";
				}
			}
			
			
			System.out.println(str[str.length-1]);
			
			if(bindingResult.hasErrors())
			{
				System.out.println(bindingResult.toString());
				model.addAttribute("contact", contact);
				return "/normal/add_contact_form";
			}
			
			String name = principal.getName();
			User user = this.userRepositiory.getUserByUserName(name);

//			processing and uploading file

			if (file.isEmpty()) {
				contact.setImage("dp.jpg");
//				return "/normal/add_contact_form";
			} else {
				contact.setImage(file.getOriginalFilename());

				File saveFile = new ClassPathResource("static/profiles").getFile();
				Path path = Paths.get(saveFile.getAbsolutePath() + File.separator + file.getOriginalFilename());
				Files.copy(file.getInputStream(), path, StandardCopyOption.REPLACE_EXISTING);

				System.out.println("img uploaded");
			}

			contact.setUser(user);
			user.getContacts().add(contact);

			this.userRepositiory.save(user);

			System.out.println("Data " + contact);
			System.out.println("contact added");
			model.addAttribute("contact", new Contact());

			session.setAttribute("message", new Message("Your contact is added.", "alert-success"));

		} catch (Exception e) {
			System.out.println(e.getMessage());
			e.printStackTrace();

			session.setAttribute("message", new Message("Something went wrong.", "alert-danger"));
		}

		return "/normal/add_contact_form";
	}

	// show contact handler
	// per page = 5[n]
	// current page = 0[page]

	@GetMapping("/show-contact/{page}")
	public String showContact(@PathVariable("page") Integer page, Model model, Principal principal,
			HttpSession session) {
//		session.removeAttribute("message");
		model.addAttribute("title", "Contacts");

		String userName = principal.getName();

		User user = this.userRepositiory.getUserByUserName(userName);

		// current page
		// contact per page
		Pageable pageable = PageRequest.of(page, 7);

		Page<Contact> contacts = this.contactRepositiory.findContactsByUser(user.getId(), pageable);

		model.addAttribute("contacts", contacts);
		model.addAttribute("currentPage", page);
		model.addAttribute("totalPages", contacts.getTotalPages());
		System.out.println(contacts);

		return "normal/show_contact";

	}
	
//	@
//	public String searchhandler() {
//		
//		return "normal/show_contact";
//	}

	// showing perticular contact detail
	@RequestMapping("/{cID}/contact")
	public String showContactDetail(@PathVariable("cID") Integer cID, Model model, Principal principal,HttpSession session) {

		session.removeAttribute("message");
		System.out.println(cID);

		Optional<Contact> contactOptional = this.contactRepositiory.findById(cID);
		Contact contact = contactOptional.get();

		String userName = principal.getName();

		User user = this.userRepositiory.getUserByUserName(userName);

		System.out.println(user.getId());
		System.out.println(contact.getUser().getId());

		if (user.getId() == contact.getUser().getId()) {
			model.addAttribute("contact", contact);
			model.addAttribute("title", contact.getName());
		}

		return "normal/contact_detail";
	}

	@GetMapping("/delete/{cid}")
	public String deletecontact(@PathVariable("cid") Integer cID, Model model, Principal principal,
			HttpSession session) {
		
		Optional<Contact> contactOptional = this.contactRepositiory.findById(cID);

		Contact contact = contactOptional.get();

		String userName = principal.getName();

		User user = this.userRepositiory.getUserByUserName(userName);

		if (user.getId() == contact.getUser().getId()) {
			
			
			this.contactRepositiory.delete(contact);
			
			
			session.setAttribute("message", new Message("Contact Deleted successfully!", "alert-success"));
		}
		else
		{
			session.setAttribute("message", new Message("Something went wrong!", "alert-danger"));
		}
		return "redirect:/user/show-contact/0";
	}
	
	
	//open update form handler
	@PostMapping("/update-contact/{cid}")
	public String updateFrom(@PathVariable("cid") Integer cid, Model model) {
		
		model.addAttribute("title", "Update Contact");
		
		Contact contact = this.contactRepositiory.findById(cid).get();
		
		model.addAttribute("contact", contact);
		return "normal/update_form";
	}
	
	
	@PostMapping("/process-update")
	public String updatehandler(@ModelAttribute Contact contact,@RequestParam("profileImage") MultipartFile file ,Model model,Principal principal,HttpSession session) {

		
		try {
			
			//old contact details
			Contact oldContactDetail = this.contactRepositiory.findById(contact.getcID()).get();
			
			
			if(!file.isEmpty())
			{
				//delete old photo
				
				File deleteFile = new ClassPathResource("static/profiles").getFile();
//				Path path = Paths.get(deleteFile.getAbsolutePath() + File.separator + file.getOriginalFilename());
				File file1 = new File(deleteFile,oldContactDetail.getImage());
				file1.delete();
				
				
				
//				update new photo
				
				File saveFile = new ClassPathResource("static/profiles").getFile();
				Path path = Paths.get(saveFile.getAbsolutePath() + File.separator + file.getOriginalFilename());
				Files.copy(file.getInputStream(), path, StandardCopyOption.REPLACE_EXISTING);

				contact.setImage(file.getOriginalFilename());
				
			}
			else
			{
				contact.setImage(oldContactDetail.getImage());
			}
			
			User user = this.userRepositiory.getUserByUserName(principal.getName());
			
			contact.setUser(user);
			
			this.contactRepositiory.save(contact);
			
			
			session.setAttribute("message", new Message("Your contact is updated....", "alert-success"));

		
		} catch (Exception e) {
			
			e.printStackTrace();
			session.setAttribute("message", new Message("Something went wrong...", "alert-danger"));

		}
		System.out.println("contactname"+ contact.getName());
		System.out.println("contact id"+ contact.getcID());
		
		
//		return "redirect:/user/"+contact.getcID()+"/contact";
		return "redirect:/user/show-contact/0";

	}
	
	
	//Your Profile handler
	@GetMapping("/profile")
	public String profileHandler(Model model,HttpSession session) {
		
		session.removeAttribute("message");
		model.addAttribute("title", "Profile");
		return "normal/profile";
	}

	
}


















